// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shimabukuromeg/ageage-search/ent/meshi"
	"github.com/shimabukuromeg/ageage-search/ent/municipality"
	"github.com/shimabukuromeg/ageage-search/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMeshi        = "Meshi"
	TypeMunicipality = "Municipality"
)

// MeshiMutation represents an operation that mutates the Meshi nodes in the graph.
type MeshiMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	article_id          *string
	title               *string
	image_url           *string
	store_name          *string
	address             *string
	site_url            *string
	published_date      *time.Time
	latitude            *float64
	addlatitude         *float64
	longitude           *float64
	addlongitude        *float64
	created_at          *time.Time
	clearedFields       map[string]struct{}
	municipality        *int
	clearedmunicipality bool
	done                bool
	oldValue            func(context.Context) (*Meshi, error)
	predicates          []predicate.Meshi
}

var _ ent.Mutation = (*MeshiMutation)(nil)

// meshiOption allows management of the mutation configuration using functional options.
type meshiOption func(*MeshiMutation)

// newMeshiMutation creates new mutation for the Meshi entity.
func newMeshiMutation(c config, op Op, opts ...meshiOption) *MeshiMutation {
	m := &MeshiMutation{
		config:        c,
		op:            op,
		typ:           TypeMeshi,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMeshiID sets the ID field of the mutation.
func withMeshiID(id int) meshiOption {
	return func(m *MeshiMutation) {
		var (
			err   error
			once  sync.Once
			value *Meshi
		)
		m.oldValue = func(ctx context.Context) (*Meshi, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Meshi.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMeshi sets the old Meshi of the mutation.
func withMeshi(node *Meshi) meshiOption {
	return func(m *MeshiMutation) {
		m.oldValue = func(context.Context) (*Meshi, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MeshiMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MeshiMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MeshiMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MeshiMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Meshi.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetArticleID sets the "article_id" field.
func (m *MeshiMutation) SetArticleID(s string) {
	m.article_id = &s
}

// ArticleID returns the value of the "article_id" field in the mutation.
func (m *MeshiMutation) ArticleID() (r string, exists bool) {
	v := m.article_id
	if v == nil {
		return
	}
	return *v, true
}

// OldArticleID returns the old "article_id" field's value of the Meshi entity.
// If the Meshi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeshiMutation) OldArticleID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldArticleID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldArticleID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldArticleID: %w", err)
	}
	return oldValue.ArticleID, nil
}

// ResetArticleID resets all changes to the "article_id" field.
func (m *MeshiMutation) ResetArticleID() {
	m.article_id = nil
}

// SetTitle sets the "title" field.
func (m *MeshiMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *MeshiMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Meshi entity.
// If the Meshi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeshiMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *MeshiMutation) ResetTitle() {
	m.title = nil
}

// SetImageURL sets the "image_url" field.
func (m *MeshiMutation) SetImageURL(s string) {
	m.image_url = &s
}

// ImageURL returns the value of the "image_url" field in the mutation.
func (m *MeshiMutation) ImageURL() (r string, exists bool) {
	v := m.image_url
	if v == nil {
		return
	}
	return *v, true
}

// OldImageURL returns the old "image_url" field's value of the Meshi entity.
// If the Meshi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeshiMutation) OldImageURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageURL: %w", err)
	}
	return oldValue.ImageURL, nil
}

// ResetImageURL resets all changes to the "image_url" field.
func (m *MeshiMutation) ResetImageURL() {
	m.image_url = nil
}

// SetStoreName sets the "store_name" field.
func (m *MeshiMutation) SetStoreName(s string) {
	m.store_name = &s
}

// StoreName returns the value of the "store_name" field in the mutation.
func (m *MeshiMutation) StoreName() (r string, exists bool) {
	v := m.store_name
	if v == nil {
		return
	}
	return *v, true
}

// OldStoreName returns the old "store_name" field's value of the Meshi entity.
// If the Meshi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeshiMutation) OldStoreName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStoreName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStoreName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStoreName: %w", err)
	}
	return oldValue.StoreName, nil
}

// ResetStoreName resets all changes to the "store_name" field.
func (m *MeshiMutation) ResetStoreName() {
	m.store_name = nil
}

// SetAddress sets the "address" field.
func (m *MeshiMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the value of the "address" field in the mutation.
func (m *MeshiMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// OldAddress returns the old "address" field's value of the Meshi entity.
// If the Meshi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeshiMutation) OldAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddress: %w", err)
	}
	return oldValue.Address, nil
}

// ResetAddress resets all changes to the "address" field.
func (m *MeshiMutation) ResetAddress() {
	m.address = nil
}

// SetSiteURL sets the "site_url" field.
func (m *MeshiMutation) SetSiteURL(s string) {
	m.site_url = &s
}

// SiteURL returns the value of the "site_url" field in the mutation.
func (m *MeshiMutation) SiteURL() (r string, exists bool) {
	v := m.site_url
	if v == nil {
		return
	}
	return *v, true
}

// OldSiteURL returns the old "site_url" field's value of the Meshi entity.
// If the Meshi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeshiMutation) OldSiteURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSiteURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSiteURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSiteURL: %w", err)
	}
	return oldValue.SiteURL, nil
}

// ResetSiteURL resets all changes to the "site_url" field.
func (m *MeshiMutation) ResetSiteURL() {
	m.site_url = nil
}

// SetPublishedDate sets the "published_date" field.
func (m *MeshiMutation) SetPublishedDate(t time.Time) {
	m.published_date = &t
}

// PublishedDate returns the value of the "published_date" field in the mutation.
func (m *MeshiMutation) PublishedDate() (r time.Time, exists bool) {
	v := m.published_date
	if v == nil {
		return
	}
	return *v, true
}

// OldPublishedDate returns the old "published_date" field's value of the Meshi entity.
// If the Meshi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeshiMutation) OldPublishedDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublishedDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublishedDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublishedDate: %w", err)
	}
	return oldValue.PublishedDate, nil
}

// ResetPublishedDate resets all changes to the "published_date" field.
func (m *MeshiMutation) ResetPublishedDate() {
	m.published_date = nil
}

// SetLatitude sets the "latitude" field.
func (m *MeshiMutation) SetLatitude(f float64) {
	m.latitude = &f
	m.addlatitude = nil
}

// Latitude returns the value of the "latitude" field in the mutation.
func (m *MeshiMutation) Latitude() (r float64, exists bool) {
	v := m.latitude
	if v == nil {
		return
	}
	return *v, true
}

// OldLatitude returns the old "latitude" field's value of the Meshi entity.
// If the Meshi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeshiMutation) OldLatitude(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLatitude is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLatitude requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLatitude: %w", err)
	}
	return oldValue.Latitude, nil
}

// AddLatitude adds f to the "latitude" field.
func (m *MeshiMutation) AddLatitude(f float64) {
	if m.addlatitude != nil {
		*m.addlatitude += f
	} else {
		m.addlatitude = &f
	}
}

// AddedLatitude returns the value that was added to the "latitude" field in this mutation.
func (m *MeshiMutation) AddedLatitude() (r float64, exists bool) {
	v := m.addlatitude
	if v == nil {
		return
	}
	return *v, true
}

// ResetLatitude resets all changes to the "latitude" field.
func (m *MeshiMutation) ResetLatitude() {
	m.latitude = nil
	m.addlatitude = nil
}

// SetLongitude sets the "longitude" field.
func (m *MeshiMutation) SetLongitude(f float64) {
	m.longitude = &f
	m.addlongitude = nil
}

// Longitude returns the value of the "longitude" field in the mutation.
func (m *MeshiMutation) Longitude() (r float64, exists bool) {
	v := m.longitude
	if v == nil {
		return
	}
	return *v, true
}

// OldLongitude returns the old "longitude" field's value of the Meshi entity.
// If the Meshi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeshiMutation) OldLongitude(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLongitude is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLongitude requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLongitude: %w", err)
	}
	return oldValue.Longitude, nil
}

// AddLongitude adds f to the "longitude" field.
func (m *MeshiMutation) AddLongitude(f float64) {
	if m.addlongitude != nil {
		*m.addlongitude += f
	} else {
		m.addlongitude = &f
	}
}

// AddedLongitude returns the value that was added to the "longitude" field in this mutation.
func (m *MeshiMutation) AddedLongitude() (r float64, exists bool) {
	v := m.addlongitude
	if v == nil {
		return
	}
	return *v, true
}

// ResetLongitude resets all changes to the "longitude" field.
func (m *MeshiMutation) ResetLongitude() {
	m.longitude = nil
	m.addlongitude = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *MeshiMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MeshiMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Meshi entity.
// If the Meshi object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MeshiMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MeshiMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetMunicipalityID sets the "municipality" edge to the Municipality entity by id.
func (m *MeshiMutation) SetMunicipalityID(id int) {
	m.municipality = &id
}

// ClearMunicipality clears the "municipality" edge to the Municipality entity.
func (m *MeshiMutation) ClearMunicipality() {
	m.clearedmunicipality = true
}

// MunicipalityCleared reports if the "municipality" edge to the Municipality entity was cleared.
func (m *MeshiMutation) MunicipalityCleared() bool {
	return m.clearedmunicipality
}

// MunicipalityID returns the "municipality" edge ID in the mutation.
func (m *MeshiMutation) MunicipalityID() (id int, exists bool) {
	if m.municipality != nil {
		return *m.municipality, true
	}
	return
}

// MunicipalityIDs returns the "municipality" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// MunicipalityID instead. It exists only for internal usage by the builders.
func (m *MeshiMutation) MunicipalityIDs() (ids []int) {
	if id := m.municipality; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetMunicipality resets all changes to the "municipality" edge.
func (m *MeshiMutation) ResetMunicipality() {
	m.municipality = nil
	m.clearedmunicipality = false
}

// Where appends a list predicates to the MeshiMutation builder.
func (m *MeshiMutation) Where(ps ...predicate.Meshi) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MeshiMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MeshiMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Meshi, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MeshiMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MeshiMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Meshi).
func (m *MeshiMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MeshiMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.article_id != nil {
		fields = append(fields, meshi.FieldArticleID)
	}
	if m.title != nil {
		fields = append(fields, meshi.FieldTitle)
	}
	if m.image_url != nil {
		fields = append(fields, meshi.FieldImageURL)
	}
	if m.store_name != nil {
		fields = append(fields, meshi.FieldStoreName)
	}
	if m.address != nil {
		fields = append(fields, meshi.FieldAddress)
	}
	if m.site_url != nil {
		fields = append(fields, meshi.FieldSiteURL)
	}
	if m.published_date != nil {
		fields = append(fields, meshi.FieldPublishedDate)
	}
	if m.latitude != nil {
		fields = append(fields, meshi.FieldLatitude)
	}
	if m.longitude != nil {
		fields = append(fields, meshi.FieldLongitude)
	}
	if m.created_at != nil {
		fields = append(fields, meshi.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MeshiMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case meshi.FieldArticleID:
		return m.ArticleID()
	case meshi.FieldTitle:
		return m.Title()
	case meshi.FieldImageURL:
		return m.ImageURL()
	case meshi.FieldStoreName:
		return m.StoreName()
	case meshi.FieldAddress:
		return m.Address()
	case meshi.FieldSiteURL:
		return m.SiteURL()
	case meshi.FieldPublishedDate:
		return m.PublishedDate()
	case meshi.FieldLatitude:
		return m.Latitude()
	case meshi.FieldLongitude:
		return m.Longitude()
	case meshi.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MeshiMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case meshi.FieldArticleID:
		return m.OldArticleID(ctx)
	case meshi.FieldTitle:
		return m.OldTitle(ctx)
	case meshi.FieldImageURL:
		return m.OldImageURL(ctx)
	case meshi.FieldStoreName:
		return m.OldStoreName(ctx)
	case meshi.FieldAddress:
		return m.OldAddress(ctx)
	case meshi.FieldSiteURL:
		return m.OldSiteURL(ctx)
	case meshi.FieldPublishedDate:
		return m.OldPublishedDate(ctx)
	case meshi.FieldLatitude:
		return m.OldLatitude(ctx)
	case meshi.FieldLongitude:
		return m.OldLongitude(ctx)
	case meshi.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Meshi field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MeshiMutation) SetField(name string, value ent.Value) error {
	switch name {
	case meshi.FieldArticleID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetArticleID(v)
		return nil
	case meshi.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case meshi.FieldImageURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageURL(v)
		return nil
	case meshi.FieldStoreName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStoreName(v)
		return nil
	case meshi.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case meshi.FieldSiteURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSiteURL(v)
		return nil
	case meshi.FieldPublishedDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublishedDate(v)
		return nil
	case meshi.FieldLatitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLatitude(v)
		return nil
	case meshi.FieldLongitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLongitude(v)
		return nil
	case meshi.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Meshi field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MeshiMutation) AddedFields() []string {
	var fields []string
	if m.addlatitude != nil {
		fields = append(fields, meshi.FieldLatitude)
	}
	if m.addlongitude != nil {
		fields = append(fields, meshi.FieldLongitude)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MeshiMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case meshi.FieldLatitude:
		return m.AddedLatitude()
	case meshi.FieldLongitude:
		return m.AddedLongitude()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MeshiMutation) AddField(name string, value ent.Value) error {
	switch name {
	case meshi.FieldLatitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLatitude(v)
		return nil
	case meshi.FieldLongitude:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddLongitude(v)
		return nil
	}
	return fmt.Errorf("unknown Meshi numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MeshiMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MeshiMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MeshiMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Meshi nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MeshiMutation) ResetField(name string) error {
	switch name {
	case meshi.FieldArticleID:
		m.ResetArticleID()
		return nil
	case meshi.FieldTitle:
		m.ResetTitle()
		return nil
	case meshi.FieldImageURL:
		m.ResetImageURL()
		return nil
	case meshi.FieldStoreName:
		m.ResetStoreName()
		return nil
	case meshi.FieldAddress:
		m.ResetAddress()
		return nil
	case meshi.FieldSiteURL:
		m.ResetSiteURL()
		return nil
	case meshi.FieldPublishedDate:
		m.ResetPublishedDate()
		return nil
	case meshi.FieldLatitude:
		m.ResetLatitude()
		return nil
	case meshi.FieldLongitude:
		m.ResetLongitude()
		return nil
	case meshi.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Meshi field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MeshiMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.municipality != nil {
		edges = append(edges, meshi.EdgeMunicipality)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MeshiMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case meshi.EdgeMunicipality:
		if id := m.municipality; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MeshiMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MeshiMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MeshiMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmunicipality {
		edges = append(edges, meshi.EdgeMunicipality)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MeshiMutation) EdgeCleared(name string) bool {
	switch name {
	case meshi.EdgeMunicipality:
		return m.clearedmunicipality
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MeshiMutation) ClearEdge(name string) error {
	switch name {
	case meshi.EdgeMunicipality:
		m.ClearMunicipality()
		return nil
	}
	return fmt.Errorf("unknown Meshi unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MeshiMutation) ResetEdge(name string) error {
	switch name {
	case meshi.EdgeMunicipality:
		m.ResetMunicipality()
		return nil
	}
	return fmt.Errorf("unknown Meshi edge %s", name)
}

// MunicipalityMutation represents an operation that mutates the Municipality nodes in the graph.
type MunicipalityMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	zipcode       *string
	created_at    *time.Time
	clearedFields map[string]struct{}
	meshis        map[int]struct{}
	removedmeshis map[int]struct{}
	clearedmeshis bool
	done          bool
	oldValue      func(context.Context) (*Municipality, error)
	predicates    []predicate.Municipality
}

var _ ent.Mutation = (*MunicipalityMutation)(nil)

// municipalityOption allows management of the mutation configuration using functional options.
type municipalityOption func(*MunicipalityMutation)

// newMunicipalityMutation creates new mutation for the Municipality entity.
func newMunicipalityMutation(c config, op Op, opts ...municipalityOption) *MunicipalityMutation {
	m := &MunicipalityMutation{
		config:        c,
		op:            op,
		typ:           TypeMunicipality,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMunicipalityID sets the ID field of the mutation.
func withMunicipalityID(id int) municipalityOption {
	return func(m *MunicipalityMutation) {
		var (
			err   error
			once  sync.Once
			value *Municipality
		)
		m.oldValue = func(ctx context.Context) (*Municipality, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Municipality.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMunicipality sets the old Municipality of the mutation.
func withMunicipality(node *Municipality) municipalityOption {
	return func(m *MunicipalityMutation) {
		m.oldValue = func(context.Context) (*Municipality, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MunicipalityMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MunicipalityMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MunicipalityMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MunicipalityMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Municipality.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *MunicipalityMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *MunicipalityMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Municipality entity.
// If the Municipality object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MunicipalityMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *MunicipalityMutation) ResetName() {
	m.name = nil
}

// SetZipcode sets the "zipcode" field.
func (m *MunicipalityMutation) SetZipcode(s string) {
	m.zipcode = &s
}

// Zipcode returns the value of the "zipcode" field in the mutation.
func (m *MunicipalityMutation) Zipcode() (r string, exists bool) {
	v := m.zipcode
	if v == nil {
		return
	}
	return *v, true
}

// OldZipcode returns the old "zipcode" field's value of the Municipality entity.
// If the Municipality object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MunicipalityMutation) OldZipcode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldZipcode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldZipcode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldZipcode: %w", err)
	}
	return oldValue.Zipcode, nil
}

// ClearZipcode clears the value of the "zipcode" field.
func (m *MunicipalityMutation) ClearZipcode() {
	m.zipcode = nil
	m.clearedFields[municipality.FieldZipcode] = struct{}{}
}

// ZipcodeCleared returns if the "zipcode" field was cleared in this mutation.
func (m *MunicipalityMutation) ZipcodeCleared() bool {
	_, ok := m.clearedFields[municipality.FieldZipcode]
	return ok
}

// ResetZipcode resets all changes to the "zipcode" field.
func (m *MunicipalityMutation) ResetZipcode() {
	m.zipcode = nil
	delete(m.clearedFields, municipality.FieldZipcode)
}

// SetCreatedAt sets the "created_at" field.
func (m *MunicipalityMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MunicipalityMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Municipality entity.
// If the Municipality object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MunicipalityMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MunicipalityMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddMeshiIDs adds the "meshis" edge to the Meshi entity by ids.
func (m *MunicipalityMutation) AddMeshiIDs(ids ...int) {
	if m.meshis == nil {
		m.meshis = make(map[int]struct{})
	}
	for i := range ids {
		m.meshis[ids[i]] = struct{}{}
	}
}

// ClearMeshis clears the "meshis" edge to the Meshi entity.
func (m *MunicipalityMutation) ClearMeshis() {
	m.clearedmeshis = true
}

// MeshisCleared reports if the "meshis" edge to the Meshi entity was cleared.
func (m *MunicipalityMutation) MeshisCleared() bool {
	return m.clearedmeshis
}

// RemoveMeshiIDs removes the "meshis" edge to the Meshi entity by IDs.
func (m *MunicipalityMutation) RemoveMeshiIDs(ids ...int) {
	if m.removedmeshis == nil {
		m.removedmeshis = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.meshis, ids[i])
		m.removedmeshis[ids[i]] = struct{}{}
	}
}

// RemovedMeshis returns the removed IDs of the "meshis" edge to the Meshi entity.
func (m *MunicipalityMutation) RemovedMeshisIDs() (ids []int) {
	for id := range m.removedmeshis {
		ids = append(ids, id)
	}
	return
}

// MeshisIDs returns the "meshis" edge IDs in the mutation.
func (m *MunicipalityMutation) MeshisIDs() (ids []int) {
	for id := range m.meshis {
		ids = append(ids, id)
	}
	return
}

// ResetMeshis resets all changes to the "meshis" edge.
func (m *MunicipalityMutation) ResetMeshis() {
	m.meshis = nil
	m.clearedmeshis = false
	m.removedmeshis = nil
}

// Where appends a list predicates to the MunicipalityMutation builder.
func (m *MunicipalityMutation) Where(ps ...predicate.Municipality) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MunicipalityMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MunicipalityMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Municipality, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MunicipalityMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MunicipalityMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Municipality).
func (m *MunicipalityMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MunicipalityMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, municipality.FieldName)
	}
	if m.zipcode != nil {
		fields = append(fields, municipality.FieldZipcode)
	}
	if m.created_at != nil {
		fields = append(fields, municipality.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MunicipalityMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case municipality.FieldName:
		return m.Name()
	case municipality.FieldZipcode:
		return m.Zipcode()
	case municipality.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MunicipalityMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case municipality.FieldName:
		return m.OldName(ctx)
	case municipality.FieldZipcode:
		return m.OldZipcode(ctx)
	case municipality.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Municipality field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MunicipalityMutation) SetField(name string, value ent.Value) error {
	switch name {
	case municipality.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case municipality.FieldZipcode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetZipcode(v)
		return nil
	case municipality.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Municipality field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MunicipalityMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MunicipalityMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MunicipalityMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Municipality numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MunicipalityMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(municipality.FieldZipcode) {
		fields = append(fields, municipality.FieldZipcode)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MunicipalityMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MunicipalityMutation) ClearField(name string) error {
	switch name {
	case municipality.FieldZipcode:
		m.ClearZipcode()
		return nil
	}
	return fmt.Errorf("unknown Municipality nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MunicipalityMutation) ResetField(name string) error {
	switch name {
	case municipality.FieldName:
		m.ResetName()
		return nil
	case municipality.FieldZipcode:
		m.ResetZipcode()
		return nil
	case municipality.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Municipality field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MunicipalityMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.meshis != nil {
		edges = append(edges, municipality.EdgeMeshis)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MunicipalityMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case municipality.EdgeMeshis:
		ids := make([]ent.Value, 0, len(m.meshis))
		for id := range m.meshis {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MunicipalityMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedmeshis != nil {
		edges = append(edges, municipality.EdgeMeshis)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MunicipalityMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case municipality.EdgeMeshis:
		ids := make([]ent.Value, 0, len(m.removedmeshis))
		for id := range m.removedmeshis {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MunicipalityMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedmeshis {
		edges = append(edges, municipality.EdgeMeshis)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MunicipalityMutation) EdgeCleared(name string) bool {
	switch name {
	case municipality.EdgeMeshis:
		return m.clearedmeshis
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MunicipalityMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Municipality unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MunicipalityMutation) ResetEdge(name string) error {
	switch name {
	case municipality.EdgeMeshis:
		m.ResetMeshis()
		return nil
	}
	return fmt.Errorf("unknown Municipality edge %s", name)
}
