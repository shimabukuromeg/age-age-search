// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (m *Meshi) Municipality(ctx context.Context) (*Municipality, error) {
	result, err := m.Edges.MunicipalityOrErr()
	if IsNotLoaded(err) {
		result, err = m.QueryMunicipality().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (m *Municipality) Meshis(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, orderBy *MeshiOrder, where *MeshiWhereInput,
) (*MeshiConnection, error) {
	opts := []MeshiPaginateOption{
		WithMeshiOrder(orderBy),
		WithMeshiFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := m.Edges.totalCount[0][alias]
	if nodes, err := m.NamedMeshis(alias); err == nil || hasTotalCount {
		pager, err := newMeshiPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &MeshiConnection{Edges: []*MeshiEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return m.QueryMeshis().Paginate(ctx, after, first, before, last, opts...)
}
