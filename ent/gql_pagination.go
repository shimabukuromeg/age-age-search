// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"io"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/shimabukuromeg/ageage-search/ent/meshi"
	"github.com/shimabukuromeg/ageage-search/ent/municipality"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[int]
	PageInfo       = entgql.PageInfo[int]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// MeshiEdge is the edge representation of Meshi.
type MeshiEdge struct {
	Node   *Meshi `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// MeshiConnection is the connection containing edges to Meshi.
type MeshiConnection struct {
	Edges      []*MeshiEdge `json:"edges"`
	PageInfo   PageInfo     `json:"pageInfo"`
	TotalCount int          `json:"totalCount"`
}

func (c *MeshiConnection) build(nodes []*Meshi, pager *meshiPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Meshi
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Meshi {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Meshi {
			return nodes[i]
		}
	}
	c.Edges = make([]*MeshiEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &MeshiEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// MeshiPaginateOption enables pagination customization.
type MeshiPaginateOption func(*meshiPager) error

// WithMeshiOrder configures pagination ordering.
func WithMeshiOrder(order *MeshiOrder) MeshiPaginateOption {
	if order == nil {
		order = DefaultMeshiOrder
	}
	o := *order
	return func(pager *meshiPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultMeshiOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithMeshiFilter configures pagination filter.
func WithMeshiFilter(filter func(*MeshiQuery) (*MeshiQuery, error)) MeshiPaginateOption {
	return func(pager *meshiPager) error {
		if filter == nil {
			return errors.New("MeshiQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type meshiPager struct {
	reverse bool
	order   *MeshiOrder
	filter  func(*MeshiQuery) (*MeshiQuery, error)
}

func newMeshiPager(opts []MeshiPaginateOption, reverse bool) (*meshiPager, error) {
	pager := &meshiPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultMeshiOrder
	}
	return pager, nil
}

func (p *meshiPager) applyFilter(query *MeshiQuery) (*MeshiQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *meshiPager) toCursor(m *Meshi) Cursor {
	return p.order.Field.toCursor(m)
}

func (p *meshiPager) applyCursors(query *MeshiQuery, after, before *Cursor) (*MeshiQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultMeshiOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *meshiPager) applyOrder(query *MeshiQuery) *MeshiQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultMeshiOrder.Field {
		query = query.Order(DefaultMeshiOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *meshiPager) orderExpr(query *MeshiQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultMeshiOrder.Field {
			b.Comma().Ident(DefaultMeshiOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Meshi.
func (m *MeshiQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...MeshiPaginateOption,
) (*MeshiConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newMeshiPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if m, err = pager.applyFilter(m); err != nil {
		return nil, err
	}
	conn := &MeshiConnection{Edges: []*MeshiEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if m, err = pager.applyCursors(m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	m = pager.applyOrder(m)
	nodes, err := m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// MeshiOrderFieldArticleID orders Meshi by article_id.
	MeshiOrderFieldArticleID = &MeshiOrderField{
		Value: func(m *Meshi) (ent.Value, error) {
			return m.ArticleID, nil
		},
		column: meshi.FieldArticleID,
		toTerm: meshi.ByArticleID,
		toCursor: func(m *Meshi) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.ArticleID,
			}
		},
	}
	// MeshiOrderFieldTitle orders Meshi by title.
	MeshiOrderFieldTitle = &MeshiOrderField{
		Value: func(m *Meshi) (ent.Value, error) {
			return m.Title, nil
		},
		column: meshi.FieldTitle,
		toTerm: meshi.ByTitle,
		toCursor: func(m *Meshi) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.Title,
			}
		},
	}
	// MeshiOrderFieldImageURL orders Meshi by image_url.
	MeshiOrderFieldImageURL = &MeshiOrderField{
		Value: func(m *Meshi) (ent.Value, error) {
			return m.ImageURL, nil
		},
		column: meshi.FieldImageURL,
		toTerm: meshi.ByImageURL,
		toCursor: func(m *Meshi) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.ImageURL,
			}
		},
	}
	// MeshiOrderFieldStoreName orders Meshi by store_name.
	MeshiOrderFieldStoreName = &MeshiOrderField{
		Value: func(m *Meshi) (ent.Value, error) {
			return m.StoreName, nil
		},
		column: meshi.FieldStoreName,
		toTerm: meshi.ByStoreName,
		toCursor: func(m *Meshi) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.StoreName,
			}
		},
	}
	// MeshiOrderFieldAddress orders Meshi by address.
	MeshiOrderFieldAddress = &MeshiOrderField{
		Value: func(m *Meshi) (ent.Value, error) {
			return m.Address, nil
		},
		column: meshi.FieldAddress,
		toTerm: meshi.ByAddress,
		toCursor: func(m *Meshi) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.Address,
			}
		},
	}
	// MeshiOrderFieldSiteURL orders Meshi by site_url.
	MeshiOrderFieldSiteURL = &MeshiOrderField{
		Value: func(m *Meshi) (ent.Value, error) {
			return m.SiteURL, nil
		},
		column: meshi.FieldSiteURL,
		toTerm: meshi.BySiteURL,
		toCursor: func(m *Meshi) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.SiteURL,
			}
		},
	}
	// MeshiOrderFieldPublishedDate orders Meshi by published_date.
	MeshiOrderFieldPublishedDate = &MeshiOrderField{
		Value: func(m *Meshi) (ent.Value, error) {
			return m.PublishedDate, nil
		},
		column: meshi.FieldPublishedDate,
		toTerm: meshi.ByPublishedDate,
		toCursor: func(m *Meshi) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.PublishedDate,
			}
		},
	}
	// MeshiOrderFieldLatitude orders Meshi by latitude.
	MeshiOrderFieldLatitude = &MeshiOrderField{
		Value: func(m *Meshi) (ent.Value, error) {
			return m.Latitude, nil
		},
		column: meshi.FieldLatitude,
		toTerm: meshi.ByLatitude,
		toCursor: func(m *Meshi) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.Latitude,
			}
		},
	}
	// MeshiOrderFieldLongitude orders Meshi by longitude.
	MeshiOrderFieldLongitude = &MeshiOrderField{
		Value: func(m *Meshi) (ent.Value, error) {
			return m.Longitude, nil
		},
		column: meshi.FieldLongitude,
		toTerm: meshi.ByLongitude,
		toCursor: func(m *Meshi) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.Longitude,
			}
		},
	}
	// MeshiOrderFieldCreatedAt orders Meshi by created_at.
	MeshiOrderFieldCreatedAt = &MeshiOrderField{
		Value: func(m *Meshi) (ent.Value, error) {
			return m.CreatedAt, nil
		},
		column: meshi.FieldCreatedAt,
		toTerm: meshi.ByCreatedAt,
		toCursor: func(m *Meshi) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f MeshiOrderField) String() string {
	var str string
	switch f.column {
	case MeshiOrderFieldArticleID.column:
		str = "ARTICLE_ID"
	case MeshiOrderFieldTitle.column:
		str = "TITLE"
	case MeshiOrderFieldImageURL.column:
		str = "IMAGE_URL"
	case MeshiOrderFieldStoreName.column:
		str = "STORE_NAME"
	case MeshiOrderFieldAddress.column:
		str = "ADDRESS"
	case MeshiOrderFieldSiteURL.column:
		str = "SITE_URL"
	case MeshiOrderFieldPublishedDate.column:
		str = "PUBLISHED_DATE"
	case MeshiOrderFieldLatitude.column:
		str = "LATITUDE"
	case MeshiOrderFieldLongitude.column:
		str = "LONGITUDE"
	case MeshiOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f MeshiOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *MeshiOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("MeshiOrderField %T must be a string", v)
	}
	switch str {
	case "ARTICLE_ID":
		*f = *MeshiOrderFieldArticleID
	case "TITLE":
		*f = *MeshiOrderFieldTitle
	case "IMAGE_URL":
		*f = *MeshiOrderFieldImageURL
	case "STORE_NAME":
		*f = *MeshiOrderFieldStoreName
	case "ADDRESS":
		*f = *MeshiOrderFieldAddress
	case "SITE_URL":
		*f = *MeshiOrderFieldSiteURL
	case "PUBLISHED_DATE":
		*f = *MeshiOrderFieldPublishedDate
	case "LATITUDE":
		*f = *MeshiOrderFieldLatitude
	case "LONGITUDE":
		*f = *MeshiOrderFieldLongitude
	case "CREATED_AT":
		*f = *MeshiOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid MeshiOrderField", str)
	}
	return nil
}

// MeshiOrderField defines the ordering field of Meshi.
type MeshiOrderField struct {
	// Value extracts the ordering value from the given Meshi.
	Value    func(*Meshi) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) meshi.OrderOption
	toCursor func(*Meshi) Cursor
}

// MeshiOrder defines the ordering of Meshi.
type MeshiOrder struct {
	Direction OrderDirection   `json:"direction"`
	Field     *MeshiOrderField `json:"field"`
}

// DefaultMeshiOrder is the default ordering of Meshi.
var DefaultMeshiOrder = &MeshiOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &MeshiOrderField{
		Value: func(m *Meshi) (ent.Value, error) {
			return m.ID, nil
		},
		column: meshi.FieldID,
		toTerm: meshi.ByID,
		toCursor: func(m *Meshi) Cursor {
			return Cursor{ID: m.ID}
		},
	},
}

// ToEdge converts Meshi into MeshiEdge.
func (m *Meshi) ToEdge(order *MeshiOrder) *MeshiEdge {
	if order == nil {
		order = DefaultMeshiOrder
	}
	return &MeshiEdge{
		Node:   m,
		Cursor: order.Field.toCursor(m),
	}
}

// MunicipalityEdge is the edge representation of Municipality.
type MunicipalityEdge struct {
	Node   *Municipality `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// MunicipalityConnection is the connection containing edges to Municipality.
type MunicipalityConnection struct {
	Edges      []*MunicipalityEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *MunicipalityConnection) build(nodes []*Municipality, pager *municipalityPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Municipality
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Municipality {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Municipality {
			return nodes[i]
		}
	}
	c.Edges = make([]*MunicipalityEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &MunicipalityEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// MunicipalityPaginateOption enables pagination customization.
type MunicipalityPaginateOption func(*municipalityPager) error

// WithMunicipalityOrder configures pagination ordering.
func WithMunicipalityOrder(order *MunicipalityOrder) MunicipalityPaginateOption {
	if order == nil {
		order = DefaultMunicipalityOrder
	}
	o := *order
	return func(pager *municipalityPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultMunicipalityOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithMunicipalityFilter configures pagination filter.
func WithMunicipalityFilter(filter func(*MunicipalityQuery) (*MunicipalityQuery, error)) MunicipalityPaginateOption {
	return func(pager *municipalityPager) error {
		if filter == nil {
			return errors.New("MunicipalityQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type municipalityPager struct {
	reverse bool
	order   *MunicipalityOrder
	filter  func(*MunicipalityQuery) (*MunicipalityQuery, error)
}

func newMunicipalityPager(opts []MunicipalityPaginateOption, reverse bool) (*municipalityPager, error) {
	pager := &municipalityPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultMunicipalityOrder
	}
	return pager, nil
}

func (p *municipalityPager) applyFilter(query *MunicipalityQuery) (*MunicipalityQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *municipalityPager) toCursor(m *Municipality) Cursor {
	return p.order.Field.toCursor(m)
}

func (p *municipalityPager) applyCursors(query *MunicipalityQuery, after, before *Cursor) (*MunicipalityQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultMunicipalityOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *municipalityPager) applyOrder(query *MunicipalityQuery) *MunicipalityQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultMunicipalityOrder.Field {
		query = query.Order(DefaultMunicipalityOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *municipalityPager) orderExpr(query *MunicipalityQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultMunicipalityOrder.Field {
			b.Comma().Ident(DefaultMunicipalityOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Municipality.
func (m *MunicipalityQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...MunicipalityPaginateOption,
) (*MunicipalityConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newMunicipalityPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if m, err = pager.applyFilter(m); err != nil {
		return nil, err
	}
	conn := &MunicipalityConnection{Edges: []*MunicipalityEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := m.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if m, err = pager.applyCursors(m, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		m.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := m.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	m = pager.applyOrder(m)
	nodes, err := m.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// MunicipalityOrderFieldName orders Municipality by name.
	MunicipalityOrderFieldName = &MunicipalityOrderField{
		Value: func(m *Municipality) (ent.Value, error) {
			return m.Name, nil
		},
		column: municipality.FieldName,
		toTerm: municipality.ByName,
		toCursor: func(m *Municipality) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.Name,
			}
		},
	}
	// MunicipalityOrderFieldZipcode orders Municipality by zipcode.
	MunicipalityOrderFieldZipcode = &MunicipalityOrderField{
		Value: func(m *Municipality) (ent.Value, error) {
			return m.Zipcode, nil
		},
		column: municipality.FieldZipcode,
		toTerm: municipality.ByZipcode,
		toCursor: func(m *Municipality) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.Zipcode,
			}
		},
	}
	// MunicipalityOrderFieldCreatedAt orders Municipality by created_at.
	MunicipalityOrderFieldCreatedAt = &MunicipalityOrderField{
		Value: func(m *Municipality) (ent.Value, error) {
			return m.CreatedAt, nil
		},
		column: municipality.FieldCreatedAt,
		toTerm: municipality.ByCreatedAt,
		toCursor: func(m *Municipality) Cursor {
			return Cursor{
				ID:    m.ID,
				Value: m.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f MunicipalityOrderField) String() string {
	var str string
	switch f.column {
	case MunicipalityOrderFieldName.column:
		str = "NAME"
	case MunicipalityOrderFieldZipcode.column:
		str = "ZIPCODE"
	case MunicipalityOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f MunicipalityOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *MunicipalityOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("MunicipalityOrderField %T must be a string", v)
	}
	switch str {
	case "NAME":
		*f = *MunicipalityOrderFieldName
	case "ZIPCODE":
		*f = *MunicipalityOrderFieldZipcode
	case "CREATED_AT":
		*f = *MunicipalityOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid MunicipalityOrderField", str)
	}
	return nil
}

// MunicipalityOrderField defines the ordering field of Municipality.
type MunicipalityOrderField struct {
	// Value extracts the ordering value from the given Municipality.
	Value    func(*Municipality) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) municipality.OrderOption
	toCursor func(*Municipality) Cursor
}

// MunicipalityOrder defines the ordering of Municipality.
type MunicipalityOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *MunicipalityOrderField `json:"field"`
}

// DefaultMunicipalityOrder is the default ordering of Municipality.
var DefaultMunicipalityOrder = &MunicipalityOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &MunicipalityOrderField{
		Value: func(m *Municipality) (ent.Value, error) {
			return m.ID, nil
		},
		column: municipality.FieldID,
		toTerm: municipality.ByID,
		toCursor: func(m *Municipality) Cursor {
			return Cursor{ID: m.ID}
		},
	},
}

// ToEdge converts Municipality into MunicipalityEdge.
func (m *Municipality) ToEdge(order *MunicipalityOrder) *MunicipalityEdge {
	if order == nil {
		order = DefaultMunicipalityOrder
	}
	return &MunicipalityEdge{
		Node:   m,
		Cursor: order.Field.toCursor(m),
	}
}
