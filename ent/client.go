// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/shimabukuromeg/ageage-search/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/shimabukuromeg/ageage-search/ent/meshi"
	"github.com/shimabukuromeg/ageage-search/ent/municipality"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Meshi is the client for interacting with the Meshi builders.
	Meshi *MeshiClient
	// Municipality is the client for interacting with the Municipality builders.
	Municipality *MunicipalityClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Meshi = NewMeshiClient(c.config)
	c.Municipality = NewMunicipalityClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Meshi:        NewMeshiClient(cfg),
		Municipality: NewMunicipalityClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Meshi:        NewMeshiClient(cfg),
		Municipality: NewMunicipalityClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Meshi.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Meshi.Use(hooks...)
	c.Municipality.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Meshi.Intercept(interceptors...)
	c.Municipality.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *MeshiMutation:
		return c.Meshi.mutate(ctx, m)
	case *MunicipalityMutation:
		return c.Municipality.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// MeshiClient is a client for the Meshi schema.
type MeshiClient struct {
	config
}

// NewMeshiClient returns a client for the Meshi from the given config.
func NewMeshiClient(c config) *MeshiClient {
	return &MeshiClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `meshi.Hooks(f(g(h())))`.
func (c *MeshiClient) Use(hooks ...Hook) {
	c.hooks.Meshi = append(c.hooks.Meshi, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `meshi.Intercept(f(g(h())))`.
func (c *MeshiClient) Intercept(interceptors ...Interceptor) {
	c.inters.Meshi = append(c.inters.Meshi, interceptors...)
}

// Create returns a builder for creating a Meshi entity.
func (c *MeshiClient) Create() *MeshiCreate {
	mutation := newMeshiMutation(c.config, OpCreate)
	return &MeshiCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Meshi entities.
func (c *MeshiClient) CreateBulk(builders ...*MeshiCreate) *MeshiCreateBulk {
	return &MeshiCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MeshiClient) MapCreateBulk(slice any, setFunc func(*MeshiCreate, int)) *MeshiCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MeshiCreateBulk{err: fmt.Errorf("calling to MeshiClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MeshiCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MeshiCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Meshi.
func (c *MeshiClient) Update() *MeshiUpdate {
	mutation := newMeshiMutation(c.config, OpUpdate)
	return &MeshiUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MeshiClient) UpdateOne(m *Meshi) *MeshiUpdateOne {
	mutation := newMeshiMutation(c.config, OpUpdateOne, withMeshi(m))
	return &MeshiUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MeshiClient) UpdateOneID(id int) *MeshiUpdateOne {
	mutation := newMeshiMutation(c.config, OpUpdateOne, withMeshiID(id))
	return &MeshiUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Meshi.
func (c *MeshiClient) Delete() *MeshiDelete {
	mutation := newMeshiMutation(c.config, OpDelete)
	return &MeshiDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MeshiClient) DeleteOne(m *Meshi) *MeshiDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MeshiClient) DeleteOneID(id int) *MeshiDeleteOne {
	builder := c.Delete().Where(meshi.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MeshiDeleteOne{builder}
}

// Query returns a query builder for Meshi.
func (c *MeshiClient) Query() *MeshiQuery {
	return &MeshiQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMeshi},
		inters: c.Interceptors(),
	}
}

// Get returns a Meshi entity by its id.
func (c *MeshiClient) Get(ctx context.Context, id int) (*Meshi, error) {
	return c.Query().Where(meshi.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MeshiClient) GetX(ctx context.Context, id int) *Meshi {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMunicipality queries the municipality edge of a Meshi.
func (c *MeshiClient) QueryMunicipality(m *Meshi) *MunicipalityQuery {
	query := (&MunicipalityClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(meshi.Table, meshi.FieldID, id),
			sqlgraph.To(municipality.Table, municipality.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, meshi.MunicipalityTable, meshi.MunicipalityColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MeshiClient) Hooks() []Hook {
	return c.hooks.Meshi
}

// Interceptors returns the client interceptors.
func (c *MeshiClient) Interceptors() []Interceptor {
	return c.inters.Meshi
}

func (c *MeshiClient) mutate(ctx context.Context, m *MeshiMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MeshiCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MeshiUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MeshiUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MeshiDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Meshi mutation op: %q", m.Op())
	}
}

// MunicipalityClient is a client for the Municipality schema.
type MunicipalityClient struct {
	config
}

// NewMunicipalityClient returns a client for the Municipality from the given config.
func NewMunicipalityClient(c config) *MunicipalityClient {
	return &MunicipalityClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `municipality.Hooks(f(g(h())))`.
func (c *MunicipalityClient) Use(hooks ...Hook) {
	c.hooks.Municipality = append(c.hooks.Municipality, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `municipality.Intercept(f(g(h())))`.
func (c *MunicipalityClient) Intercept(interceptors ...Interceptor) {
	c.inters.Municipality = append(c.inters.Municipality, interceptors...)
}

// Create returns a builder for creating a Municipality entity.
func (c *MunicipalityClient) Create() *MunicipalityCreate {
	mutation := newMunicipalityMutation(c.config, OpCreate)
	return &MunicipalityCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Municipality entities.
func (c *MunicipalityClient) CreateBulk(builders ...*MunicipalityCreate) *MunicipalityCreateBulk {
	return &MunicipalityCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *MunicipalityClient) MapCreateBulk(slice any, setFunc func(*MunicipalityCreate, int)) *MunicipalityCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &MunicipalityCreateBulk{err: fmt.Errorf("calling to MunicipalityClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*MunicipalityCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &MunicipalityCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Municipality.
func (c *MunicipalityClient) Update() *MunicipalityUpdate {
	mutation := newMunicipalityMutation(c.config, OpUpdate)
	return &MunicipalityUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MunicipalityClient) UpdateOne(m *Municipality) *MunicipalityUpdateOne {
	mutation := newMunicipalityMutation(c.config, OpUpdateOne, withMunicipality(m))
	return &MunicipalityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MunicipalityClient) UpdateOneID(id int) *MunicipalityUpdateOne {
	mutation := newMunicipalityMutation(c.config, OpUpdateOne, withMunicipalityID(id))
	return &MunicipalityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Municipality.
func (c *MunicipalityClient) Delete() *MunicipalityDelete {
	mutation := newMunicipalityMutation(c.config, OpDelete)
	return &MunicipalityDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *MunicipalityClient) DeleteOne(m *Municipality) *MunicipalityDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *MunicipalityClient) DeleteOneID(id int) *MunicipalityDeleteOne {
	builder := c.Delete().Where(municipality.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MunicipalityDeleteOne{builder}
}

// Query returns a query builder for Municipality.
func (c *MunicipalityClient) Query() *MunicipalityQuery {
	return &MunicipalityQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeMunicipality},
		inters: c.Interceptors(),
	}
}

// Get returns a Municipality entity by its id.
func (c *MunicipalityClient) Get(ctx context.Context, id int) (*Municipality, error) {
	return c.Query().Where(municipality.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MunicipalityClient) GetX(ctx context.Context, id int) *Municipality {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMeshis queries the meshis edge of a Municipality.
func (c *MunicipalityClient) QueryMeshis(m *Municipality) *MeshiQuery {
	query := (&MeshiClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(municipality.Table, municipality.FieldID, id),
			sqlgraph.To(meshi.Table, meshi.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, municipality.MeshisTable, municipality.MeshisColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MunicipalityClient) Hooks() []Hook {
	return c.hooks.Municipality
}

// Interceptors returns the client interceptors.
func (c *MunicipalityClient) Interceptors() []Interceptor {
	return c.inters.Municipality
}

func (c *MunicipalityClient) mutate(ctx context.Context, m *MunicipalityMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&MunicipalityCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&MunicipalityUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&MunicipalityUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&MunicipalityDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Municipality mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Meshi, Municipality []ent.Hook
	}
	inters struct {
		Meshi, Municipality []ent.Interceptor
	}
)
