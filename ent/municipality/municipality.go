// Code generated by ent, DO NOT EDIT.

package municipality

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the municipality type in the database.
	Label = "municipality"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeMeshis holds the string denoting the meshis edge name in mutations.
	EdgeMeshis = "meshis"
	// Table holds the table name of the municipality in the database.
	Table = "municipalities"
	// MeshisTable is the table that holds the meshis relation/edge.
	MeshisTable = "meshis"
	// MeshisInverseTable is the table name for the Meshi entity.
	// It exists in this package in order to avoid circular dependency with the "meshi" package.
	MeshisInverseTable = "meshis"
	// MeshisColumn is the table column denoting the meshis relation/edge.
	MeshisColumn = "municipality_meshis"
)

// Columns holds all SQL columns for municipality fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the Municipality queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByMeshisCount orders the results by meshis count.
func ByMeshisCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMeshisStep(), opts...)
	}
}

// ByMeshis orders the results by meshis terms.
func ByMeshis(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMeshisStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newMeshisStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MeshisInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MeshisTable, MeshisColumn),
	)
}
