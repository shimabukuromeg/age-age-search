// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shimabukuromeg/ageage-search/ent/meshi"
	"github.com/shimabukuromeg/ageage-search/ent/municipality"
)

// Meshi is the model entity for the Meshi schema.
type Meshi struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ArticleID holds the value of the "article_id" field.
	ArticleID string `json:"article_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// ImageURL holds the value of the "image_url" field.
	ImageURL string `json:"image_url,omitempty"`
	// StoreName holds the value of the "store_name" field.
	StoreName string `json:"store_name,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// SiteURL holds the value of the "site_url" field.
	SiteURL string `json:"site_url,omitempty"`
	// PublishedDate holds the value of the "published_date" field.
	PublishedDate *time.Time `json:"published_date,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MeshiQuery when eager-loading is set.
	Edges               MeshiEdges `json:"edges"`
	municipality_meshis *int
	selectValues        sql.SelectValues
}

// MeshiEdges holds the relations/edges for other nodes in the graph.
type MeshiEdges struct {
	// Municipality holds the value of the municipality edge.
	Municipality *Municipality `json:"municipality,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MunicipalityOrErr returns the Municipality value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MeshiEdges) MunicipalityOrErr() (*Municipality, error) {
	if e.loadedTypes[0] {
		if e.Municipality == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: municipality.Label}
		}
		return e.Municipality, nil
	}
	return nil, &NotLoadedError{edge: "municipality"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Meshi) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case meshi.FieldID:
			values[i] = new(sql.NullInt64)
		case meshi.FieldArticleID, meshi.FieldTitle, meshi.FieldImageURL, meshi.FieldStoreName, meshi.FieldAddress, meshi.FieldSiteURL:
			values[i] = new(sql.NullString)
		case meshi.FieldPublishedDate, meshi.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case meshi.ForeignKeys[0]: // municipality_meshis
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Meshi fields.
func (m *Meshi) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case meshi.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case meshi.FieldArticleID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field article_id", values[i])
			} else if value.Valid {
				m.ArticleID = value.String
			}
		case meshi.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				m.Title = value.String
			}
		case meshi.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url", values[i])
			} else if value.Valid {
				m.ImageURL = value.String
			}
		case meshi.FieldStoreName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field store_name", values[i])
			} else if value.Valid {
				m.StoreName = value.String
			}
		case meshi.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				m.Address = value.String
			}
		case meshi.FieldSiteURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field site_url", values[i])
			} else if value.Valid {
				m.SiteURL = value.String
			}
		case meshi.FieldPublishedDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field published_date", values[i])
			} else if value.Valid {
				m.PublishedDate = new(time.Time)
				*m.PublishedDate = value.Time
			}
		case meshi.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case meshi.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field municipality_meshis", value)
			} else if value.Valid {
				m.municipality_meshis = new(int)
				*m.municipality_meshis = int(value.Int64)
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Meshi.
// This includes values selected through modifiers, order, etc.
func (m *Meshi) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryMunicipality queries the "municipality" edge of the Meshi entity.
func (m *Meshi) QueryMunicipality() *MunicipalityQuery {
	return NewMeshiClient(m.config).QueryMunicipality(m)
}

// Update returns a builder for updating this Meshi.
// Note that you need to call Meshi.Unwrap() before calling this method if this Meshi
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Meshi) Update() *MeshiUpdateOne {
	return NewMeshiClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Meshi entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Meshi) Unwrap() *Meshi {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Meshi is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Meshi) String() string {
	var builder strings.Builder
	builder.WriteString("Meshi(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("article_id=")
	builder.WriteString(m.ArticleID)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(m.Title)
	builder.WriteString(", ")
	builder.WriteString("image_url=")
	builder.WriteString(m.ImageURL)
	builder.WriteString(", ")
	builder.WriteString("store_name=")
	builder.WriteString(m.StoreName)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(m.Address)
	builder.WriteString(", ")
	builder.WriteString("site_url=")
	builder.WriteString(m.SiteURL)
	builder.WriteString(", ")
	if v := m.PublishedDate; v != nil {
		builder.WriteString("published_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Meshis is a parsable slice of Meshi.
type Meshis []*Meshi
