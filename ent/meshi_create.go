// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shimabukuromeg/ageage-search/ent/meshi"
	"github.com/shimabukuromeg/ageage-search/ent/municipality"
)

// MeshiCreate is the builder for creating a Meshi entity.
type MeshiCreate struct {
	config
	mutation *MeshiMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetArticleID sets the "article_id" field.
func (mc *MeshiCreate) SetArticleID(s string) *MeshiCreate {
	mc.mutation.SetArticleID(s)
	return mc
}

// SetTitle sets the "title" field.
func (mc *MeshiCreate) SetTitle(s string) *MeshiCreate {
	mc.mutation.SetTitle(s)
	return mc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (mc *MeshiCreate) SetNillableTitle(s *string) *MeshiCreate {
	if s != nil {
		mc.SetTitle(*s)
	}
	return mc
}

// SetImageURL sets the "image_url" field.
func (mc *MeshiCreate) SetImageURL(s string) *MeshiCreate {
	mc.mutation.SetImageURL(s)
	return mc
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (mc *MeshiCreate) SetNillableImageURL(s *string) *MeshiCreate {
	if s != nil {
		mc.SetImageURL(*s)
	}
	return mc
}

// SetStoreName sets the "store_name" field.
func (mc *MeshiCreate) SetStoreName(s string) *MeshiCreate {
	mc.mutation.SetStoreName(s)
	return mc
}

// SetNillableStoreName sets the "store_name" field if the given value is not nil.
func (mc *MeshiCreate) SetNillableStoreName(s *string) *MeshiCreate {
	if s != nil {
		mc.SetStoreName(*s)
	}
	return mc
}

// SetAddress sets the "address" field.
func (mc *MeshiCreate) SetAddress(s string) *MeshiCreate {
	mc.mutation.SetAddress(s)
	return mc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (mc *MeshiCreate) SetNillableAddress(s *string) *MeshiCreate {
	if s != nil {
		mc.SetAddress(*s)
	}
	return mc
}

// SetSiteURL sets the "site_url" field.
func (mc *MeshiCreate) SetSiteURL(s string) *MeshiCreate {
	mc.mutation.SetSiteURL(s)
	return mc
}

// SetNillableSiteURL sets the "site_url" field if the given value is not nil.
func (mc *MeshiCreate) SetNillableSiteURL(s *string) *MeshiCreate {
	if s != nil {
		mc.SetSiteURL(*s)
	}
	return mc
}

// SetPublishedDate sets the "published_date" field.
func (mc *MeshiCreate) SetPublishedDate(t time.Time) *MeshiCreate {
	mc.mutation.SetPublishedDate(t)
	return mc
}

// SetLatitude sets the "latitude" field.
func (mc *MeshiCreate) SetLatitude(f float64) *MeshiCreate {
	mc.mutation.SetLatitude(f)
	return mc
}

// SetLongitude sets the "longitude" field.
func (mc *MeshiCreate) SetLongitude(f float64) *MeshiCreate {
	mc.mutation.SetLongitude(f)
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *MeshiCreate) SetCreatedAt(t time.Time) *MeshiCreate {
	mc.mutation.SetCreatedAt(t)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MeshiCreate) SetNillableCreatedAt(t *time.Time) *MeshiCreate {
	if t != nil {
		mc.SetCreatedAt(*t)
	}
	return mc
}

// SetMunicipalityID sets the "municipality" edge to the Municipality entity by ID.
func (mc *MeshiCreate) SetMunicipalityID(id int) *MeshiCreate {
	mc.mutation.SetMunicipalityID(id)
	return mc
}

// SetNillableMunicipalityID sets the "municipality" edge to the Municipality entity by ID if the given value is not nil.
func (mc *MeshiCreate) SetNillableMunicipalityID(id *int) *MeshiCreate {
	if id != nil {
		mc = mc.SetMunicipalityID(*id)
	}
	return mc
}

// SetMunicipality sets the "municipality" edge to the Municipality entity.
func (mc *MeshiCreate) SetMunicipality(m *Municipality) *MeshiCreate {
	return mc.SetMunicipalityID(m.ID)
}

// Mutation returns the MeshiMutation object of the builder.
func (mc *MeshiCreate) Mutation() *MeshiMutation {
	return mc.mutation
}

// Save creates the Meshi in the database.
func (mc *MeshiCreate) Save(ctx context.Context) (*Meshi, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MeshiCreate) SaveX(ctx context.Context) *Meshi {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MeshiCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MeshiCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MeshiCreate) defaults() {
	if _, ok := mc.mutation.Title(); !ok {
		v := meshi.DefaultTitle
		mc.mutation.SetTitle(v)
	}
	if _, ok := mc.mutation.ImageURL(); !ok {
		v := meshi.DefaultImageURL
		mc.mutation.SetImageURL(v)
	}
	if _, ok := mc.mutation.StoreName(); !ok {
		v := meshi.DefaultStoreName
		mc.mutation.SetStoreName(v)
	}
	if _, ok := mc.mutation.Address(); !ok {
		v := meshi.DefaultAddress
		mc.mutation.SetAddress(v)
	}
	if _, ok := mc.mutation.SiteURL(); !ok {
		v := meshi.DefaultSiteURL
		mc.mutation.SetSiteURL(v)
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := meshi.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MeshiCreate) check() error {
	if _, ok := mc.mutation.ArticleID(); !ok {
		return &ValidationError{Name: "article_id", err: errors.New(`ent: missing required field "Meshi.article_id"`)}
	}
	if _, ok := mc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Meshi.title"`)}
	}
	if _, ok := mc.mutation.ImageURL(); !ok {
		return &ValidationError{Name: "image_url", err: errors.New(`ent: missing required field "Meshi.image_url"`)}
	}
	if _, ok := mc.mutation.StoreName(); !ok {
		return &ValidationError{Name: "store_name", err: errors.New(`ent: missing required field "Meshi.store_name"`)}
	}
	if _, ok := mc.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Meshi.address"`)}
	}
	if _, ok := mc.mutation.SiteURL(); !ok {
		return &ValidationError{Name: "site_url", err: errors.New(`ent: missing required field "Meshi.site_url"`)}
	}
	if _, ok := mc.mutation.PublishedDate(); !ok {
		return &ValidationError{Name: "published_date", err: errors.New(`ent: missing required field "Meshi.published_date"`)}
	}
	if _, ok := mc.mutation.Latitude(); !ok {
		return &ValidationError{Name: "latitude", err: errors.New(`ent: missing required field "Meshi.latitude"`)}
	}
	if _, ok := mc.mutation.Longitude(); !ok {
		return &ValidationError{Name: "longitude", err: errors.New(`ent: missing required field "Meshi.longitude"`)}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Meshi.created_at"`)}
	}
	return nil
}

func (mc *MeshiCreate) sqlSave(ctx context.Context) (*Meshi, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MeshiCreate) createSpec() (*Meshi, *sqlgraph.CreateSpec) {
	var (
		_node = &Meshi{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(meshi.Table, sqlgraph.NewFieldSpec(meshi.FieldID, field.TypeInt))
	)
	_spec.OnConflict = mc.conflict
	if value, ok := mc.mutation.ArticleID(); ok {
		_spec.SetField(meshi.FieldArticleID, field.TypeString, value)
		_node.ArticleID = value
	}
	if value, ok := mc.mutation.Title(); ok {
		_spec.SetField(meshi.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := mc.mutation.ImageURL(); ok {
		_spec.SetField(meshi.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if value, ok := mc.mutation.StoreName(); ok {
		_spec.SetField(meshi.FieldStoreName, field.TypeString, value)
		_node.StoreName = value
	}
	if value, ok := mc.mutation.Address(); ok {
		_spec.SetField(meshi.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := mc.mutation.SiteURL(); ok {
		_spec.SetField(meshi.FieldSiteURL, field.TypeString, value)
		_node.SiteURL = value
	}
	if value, ok := mc.mutation.PublishedDate(); ok {
		_spec.SetField(meshi.FieldPublishedDate, field.TypeTime, value)
		_node.PublishedDate = value
	}
	if value, ok := mc.mutation.Latitude(); ok {
		_spec.SetField(meshi.FieldLatitude, field.TypeFloat64, value)
		_node.Latitude = value
	}
	if value, ok := mc.mutation.Longitude(); ok {
		_spec.SetField(meshi.FieldLongitude, field.TypeFloat64, value)
		_node.Longitude = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(meshi.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := mc.mutation.MunicipalityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   meshi.MunicipalityTable,
			Columns: []string{meshi.MunicipalityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(municipality.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.municipality_meshis = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Meshi.Create().
//		SetArticleID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MeshiUpsert) {
//			SetArticleID(v+v).
//		}).
//		Exec(ctx)
func (mc *MeshiCreate) OnConflict(opts ...sql.ConflictOption) *MeshiUpsertOne {
	mc.conflict = opts
	return &MeshiUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Meshi.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MeshiCreate) OnConflictColumns(columns ...string) *MeshiUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MeshiUpsertOne{
		create: mc,
	}
}

type (
	// MeshiUpsertOne is the builder for "upsert"-ing
	//  one Meshi node.
	MeshiUpsertOne struct {
		create *MeshiCreate
	}

	// MeshiUpsert is the "OnConflict" setter.
	MeshiUpsert struct {
		*sql.UpdateSet
	}
)

// SetArticleID sets the "article_id" field.
func (u *MeshiUpsert) SetArticleID(v string) *MeshiUpsert {
	u.Set(meshi.FieldArticleID, v)
	return u
}

// UpdateArticleID sets the "article_id" field to the value that was provided on create.
func (u *MeshiUpsert) UpdateArticleID() *MeshiUpsert {
	u.SetExcluded(meshi.FieldArticleID)
	return u
}

// SetTitle sets the "title" field.
func (u *MeshiUpsert) SetTitle(v string) *MeshiUpsert {
	u.Set(meshi.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *MeshiUpsert) UpdateTitle() *MeshiUpsert {
	u.SetExcluded(meshi.FieldTitle)
	return u
}

// SetImageURL sets the "image_url" field.
func (u *MeshiUpsert) SetImageURL(v string) *MeshiUpsert {
	u.Set(meshi.FieldImageURL, v)
	return u
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *MeshiUpsert) UpdateImageURL() *MeshiUpsert {
	u.SetExcluded(meshi.FieldImageURL)
	return u
}

// SetStoreName sets the "store_name" field.
func (u *MeshiUpsert) SetStoreName(v string) *MeshiUpsert {
	u.Set(meshi.FieldStoreName, v)
	return u
}

// UpdateStoreName sets the "store_name" field to the value that was provided on create.
func (u *MeshiUpsert) UpdateStoreName() *MeshiUpsert {
	u.SetExcluded(meshi.FieldStoreName)
	return u
}

// SetAddress sets the "address" field.
func (u *MeshiUpsert) SetAddress(v string) *MeshiUpsert {
	u.Set(meshi.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *MeshiUpsert) UpdateAddress() *MeshiUpsert {
	u.SetExcluded(meshi.FieldAddress)
	return u
}

// SetSiteURL sets the "site_url" field.
func (u *MeshiUpsert) SetSiteURL(v string) *MeshiUpsert {
	u.Set(meshi.FieldSiteURL, v)
	return u
}

// UpdateSiteURL sets the "site_url" field to the value that was provided on create.
func (u *MeshiUpsert) UpdateSiteURL() *MeshiUpsert {
	u.SetExcluded(meshi.FieldSiteURL)
	return u
}

// SetPublishedDate sets the "published_date" field.
func (u *MeshiUpsert) SetPublishedDate(v time.Time) *MeshiUpsert {
	u.Set(meshi.FieldPublishedDate, v)
	return u
}

// UpdatePublishedDate sets the "published_date" field to the value that was provided on create.
func (u *MeshiUpsert) UpdatePublishedDate() *MeshiUpsert {
	u.SetExcluded(meshi.FieldPublishedDate)
	return u
}

// SetLatitude sets the "latitude" field.
func (u *MeshiUpsert) SetLatitude(v float64) *MeshiUpsert {
	u.Set(meshi.FieldLatitude, v)
	return u
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *MeshiUpsert) UpdateLatitude() *MeshiUpsert {
	u.SetExcluded(meshi.FieldLatitude)
	return u
}

// AddLatitude adds v to the "latitude" field.
func (u *MeshiUpsert) AddLatitude(v float64) *MeshiUpsert {
	u.Add(meshi.FieldLatitude, v)
	return u
}

// SetLongitude sets the "longitude" field.
func (u *MeshiUpsert) SetLongitude(v float64) *MeshiUpsert {
	u.Set(meshi.FieldLongitude, v)
	return u
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *MeshiUpsert) UpdateLongitude() *MeshiUpsert {
	u.SetExcluded(meshi.FieldLongitude)
	return u
}

// AddLongitude adds v to the "longitude" field.
func (u *MeshiUpsert) AddLongitude(v float64) *MeshiUpsert {
	u.Add(meshi.FieldLongitude, v)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *MeshiUpsert) SetCreatedAt(v time.Time) *MeshiUpsert {
	u.Set(meshi.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MeshiUpsert) UpdateCreatedAt() *MeshiUpsert {
	u.SetExcluded(meshi.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Meshi.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MeshiUpsertOne) UpdateNewValues() *MeshiUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Meshi.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MeshiUpsertOne) Ignore() *MeshiUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MeshiUpsertOne) DoNothing() *MeshiUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MeshiCreate.OnConflict
// documentation for more info.
func (u *MeshiUpsertOne) Update(set func(*MeshiUpsert)) *MeshiUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MeshiUpsert{UpdateSet: update})
	}))
	return u
}

// SetArticleID sets the "article_id" field.
func (u *MeshiUpsertOne) SetArticleID(v string) *MeshiUpsertOne {
	return u.Update(func(s *MeshiUpsert) {
		s.SetArticleID(v)
	})
}

// UpdateArticleID sets the "article_id" field to the value that was provided on create.
func (u *MeshiUpsertOne) UpdateArticleID() *MeshiUpsertOne {
	return u.Update(func(s *MeshiUpsert) {
		s.UpdateArticleID()
	})
}

// SetTitle sets the "title" field.
func (u *MeshiUpsertOne) SetTitle(v string) *MeshiUpsertOne {
	return u.Update(func(s *MeshiUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *MeshiUpsertOne) UpdateTitle() *MeshiUpsertOne {
	return u.Update(func(s *MeshiUpsert) {
		s.UpdateTitle()
	})
}

// SetImageURL sets the "image_url" field.
func (u *MeshiUpsertOne) SetImageURL(v string) *MeshiUpsertOne {
	return u.Update(func(s *MeshiUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *MeshiUpsertOne) UpdateImageURL() *MeshiUpsertOne {
	return u.Update(func(s *MeshiUpsert) {
		s.UpdateImageURL()
	})
}

// SetStoreName sets the "store_name" field.
func (u *MeshiUpsertOne) SetStoreName(v string) *MeshiUpsertOne {
	return u.Update(func(s *MeshiUpsert) {
		s.SetStoreName(v)
	})
}

// UpdateStoreName sets the "store_name" field to the value that was provided on create.
func (u *MeshiUpsertOne) UpdateStoreName() *MeshiUpsertOne {
	return u.Update(func(s *MeshiUpsert) {
		s.UpdateStoreName()
	})
}

// SetAddress sets the "address" field.
func (u *MeshiUpsertOne) SetAddress(v string) *MeshiUpsertOne {
	return u.Update(func(s *MeshiUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *MeshiUpsertOne) UpdateAddress() *MeshiUpsertOne {
	return u.Update(func(s *MeshiUpsert) {
		s.UpdateAddress()
	})
}

// SetSiteURL sets the "site_url" field.
func (u *MeshiUpsertOne) SetSiteURL(v string) *MeshiUpsertOne {
	return u.Update(func(s *MeshiUpsert) {
		s.SetSiteURL(v)
	})
}

// UpdateSiteURL sets the "site_url" field to the value that was provided on create.
func (u *MeshiUpsertOne) UpdateSiteURL() *MeshiUpsertOne {
	return u.Update(func(s *MeshiUpsert) {
		s.UpdateSiteURL()
	})
}

// SetPublishedDate sets the "published_date" field.
func (u *MeshiUpsertOne) SetPublishedDate(v time.Time) *MeshiUpsertOne {
	return u.Update(func(s *MeshiUpsert) {
		s.SetPublishedDate(v)
	})
}

// UpdatePublishedDate sets the "published_date" field to the value that was provided on create.
func (u *MeshiUpsertOne) UpdatePublishedDate() *MeshiUpsertOne {
	return u.Update(func(s *MeshiUpsert) {
		s.UpdatePublishedDate()
	})
}

// SetLatitude sets the "latitude" field.
func (u *MeshiUpsertOne) SetLatitude(v float64) *MeshiUpsertOne {
	return u.Update(func(s *MeshiUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *MeshiUpsertOne) AddLatitude(v float64) *MeshiUpsertOne {
	return u.Update(func(s *MeshiUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *MeshiUpsertOne) UpdateLatitude() *MeshiUpsertOne {
	return u.Update(func(s *MeshiUpsert) {
		s.UpdateLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *MeshiUpsertOne) SetLongitude(v float64) *MeshiUpsertOne {
	return u.Update(func(s *MeshiUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *MeshiUpsertOne) AddLongitude(v float64) *MeshiUpsertOne {
	return u.Update(func(s *MeshiUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *MeshiUpsertOne) UpdateLongitude() *MeshiUpsertOne {
	return u.Update(func(s *MeshiUpsert) {
		s.UpdateLongitude()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *MeshiUpsertOne) SetCreatedAt(v time.Time) *MeshiUpsertOne {
	return u.Update(func(s *MeshiUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MeshiUpsertOne) UpdateCreatedAt() *MeshiUpsertOne {
	return u.Update(func(s *MeshiUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *MeshiUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MeshiCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MeshiUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MeshiUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MeshiUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MeshiCreateBulk is the builder for creating many Meshi entities in bulk.
type MeshiCreateBulk struct {
	config
	builders []*MeshiCreate
	conflict []sql.ConflictOption
}

// Save creates the Meshi entities in the database.
func (mcb *MeshiCreateBulk) Save(ctx context.Context) ([]*Meshi, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Meshi, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MeshiMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MeshiCreateBulk) SaveX(ctx context.Context) []*Meshi {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MeshiCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MeshiCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Meshi.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MeshiUpsert) {
//			SetArticleID(v+v).
//		}).
//		Exec(ctx)
func (mcb *MeshiCreateBulk) OnConflict(opts ...sql.ConflictOption) *MeshiUpsertBulk {
	mcb.conflict = opts
	return &MeshiUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Meshi.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MeshiCreateBulk) OnConflictColumns(columns ...string) *MeshiUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MeshiUpsertBulk{
		create: mcb,
	}
}

// MeshiUpsertBulk is the builder for "upsert"-ing
// a bulk of Meshi nodes.
type MeshiUpsertBulk struct {
	create *MeshiCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Meshi.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MeshiUpsertBulk) UpdateNewValues() *MeshiUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Meshi.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MeshiUpsertBulk) Ignore() *MeshiUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MeshiUpsertBulk) DoNothing() *MeshiUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MeshiCreateBulk.OnConflict
// documentation for more info.
func (u *MeshiUpsertBulk) Update(set func(*MeshiUpsert)) *MeshiUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MeshiUpsert{UpdateSet: update})
	}))
	return u
}

// SetArticleID sets the "article_id" field.
func (u *MeshiUpsertBulk) SetArticleID(v string) *MeshiUpsertBulk {
	return u.Update(func(s *MeshiUpsert) {
		s.SetArticleID(v)
	})
}

// UpdateArticleID sets the "article_id" field to the value that was provided on create.
func (u *MeshiUpsertBulk) UpdateArticleID() *MeshiUpsertBulk {
	return u.Update(func(s *MeshiUpsert) {
		s.UpdateArticleID()
	})
}

// SetTitle sets the "title" field.
func (u *MeshiUpsertBulk) SetTitle(v string) *MeshiUpsertBulk {
	return u.Update(func(s *MeshiUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *MeshiUpsertBulk) UpdateTitle() *MeshiUpsertBulk {
	return u.Update(func(s *MeshiUpsert) {
		s.UpdateTitle()
	})
}

// SetImageURL sets the "image_url" field.
func (u *MeshiUpsertBulk) SetImageURL(v string) *MeshiUpsertBulk {
	return u.Update(func(s *MeshiUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *MeshiUpsertBulk) UpdateImageURL() *MeshiUpsertBulk {
	return u.Update(func(s *MeshiUpsert) {
		s.UpdateImageURL()
	})
}

// SetStoreName sets the "store_name" field.
func (u *MeshiUpsertBulk) SetStoreName(v string) *MeshiUpsertBulk {
	return u.Update(func(s *MeshiUpsert) {
		s.SetStoreName(v)
	})
}

// UpdateStoreName sets the "store_name" field to the value that was provided on create.
func (u *MeshiUpsertBulk) UpdateStoreName() *MeshiUpsertBulk {
	return u.Update(func(s *MeshiUpsert) {
		s.UpdateStoreName()
	})
}

// SetAddress sets the "address" field.
func (u *MeshiUpsertBulk) SetAddress(v string) *MeshiUpsertBulk {
	return u.Update(func(s *MeshiUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *MeshiUpsertBulk) UpdateAddress() *MeshiUpsertBulk {
	return u.Update(func(s *MeshiUpsert) {
		s.UpdateAddress()
	})
}

// SetSiteURL sets the "site_url" field.
func (u *MeshiUpsertBulk) SetSiteURL(v string) *MeshiUpsertBulk {
	return u.Update(func(s *MeshiUpsert) {
		s.SetSiteURL(v)
	})
}

// UpdateSiteURL sets the "site_url" field to the value that was provided on create.
func (u *MeshiUpsertBulk) UpdateSiteURL() *MeshiUpsertBulk {
	return u.Update(func(s *MeshiUpsert) {
		s.UpdateSiteURL()
	})
}

// SetPublishedDate sets the "published_date" field.
func (u *MeshiUpsertBulk) SetPublishedDate(v time.Time) *MeshiUpsertBulk {
	return u.Update(func(s *MeshiUpsert) {
		s.SetPublishedDate(v)
	})
}

// UpdatePublishedDate sets the "published_date" field to the value that was provided on create.
func (u *MeshiUpsertBulk) UpdatePublishedDate() *MeshiUpsertBulk {
	return u.Update(func(s *MeshiUpsert) {
		s.UpdatePublishedDate()
	})
}

// SetLatitude sets the "latitude" field.
func (u *MeshiUpsertBulk) SetLatitude(v float64) *MeshiUpsertBulk {
	return u.Update(func(s *MeshiUpsert) {
		s.SetLatitude(v)
	})
}

// AddLatitude adds v to the "latitude" field.
func (u *MeshiUpsertBulk) AddLatitude(v float64) *MeshiUpsertBulk {
	return u.Update(func(s *MeshiUpsert) {
		s.AddLatitude(v)
	})
}

// UpdateLatitude sets the "latitude" field to the value that was provided on create.
func (u *MeshiUpsertBulk) UpdateLatitude() *MeshiUpsertBulk {
	return u.Update(func(s *MeshiUpsert) {
		s.UpdateLatitude()
	})
}

// SetLongitude sets the "longitude" field.
func (u *MeshiUpsertBulk) SetLongitude(v float64) *MeshiUpsertBulk {
	return u.Update(func(s *MeshiUpsert) {
		s.SetLongitude(v)
	})
}

// AddLongitude adds v to the "longitude" field.
func (u *MeshiUpsertBulk) AddLongitude(v float64) *MeshiUpsertBulk {
	return u.Update(func(s *MeshiUpsert) {
		s.AddLongitude(v)
	})
}

// UpdateLongitude sets the "longitude" field to the value that was provided on create.
func (u *MeshiUpsertBulk) UpdateLongitude() *MeshiUpsertBulk {
	return u.Update(func(s *MeshiUpsert) {
		s.UpdateLongitude()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *MeshiUpsertBulk) SetCreatedAt(v time.Time) *MeshiUpsertBulk {
	return u.Update(func(s *MeshiUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *MeshiUpsertBulk) UpdateCreatedAt() *MeshiUpsertBulk {
	return u.Update(func(s *MeshiUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *MeshiUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MeshiCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MeshiCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MeshiUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
