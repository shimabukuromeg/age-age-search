directive @goField(
  forceResolver: Boolean
  name: String
) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(
  model: String
  models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
アゲアゲめし
"""
type Meshi implements Node {
  """
  ID
  """
  id: ID!
  """
  記事ID
  """
  articleID: String!
  """
  タイトル
  """
  title: String!
  """
  画像URL
  """
  imageURL: String!
  """
  店舗名
  """
  storeName: String!
  """
  住所
  """
  address: String!
  """
  サイトURL
  """
  siteURL: String!
  """
  記事公開日
  """
  publishedDate: Time!
  """
  緯度
  """
  latitude: Float!
  """
  経度
  """
  longitude: Float!
  """
  作成日時
  """
  createdAt: Time!
  """
  市町村
  """
  municipality: Municipality
}
"""
A connection to a list of items.
"""
type MeshiConnection {
  """
  A list of edges.
  """
  edges: [MeshiEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type MeshiEdge {
  """
  The item at the end of the edge.
  """
  node: Meshi
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Meshi connections
"""
input MeshiOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Meshis.
  """
  field: MeshiOrderField!
}
"""
Properties by which Meshi connections can be ordered.
"""
enum MeshiOrderField {
  ARTICLE_ID
  TITLE
  IMAGE_URL
  STORE_NAME
  ADDRESS
  SITE_URL
  PUBLISHED_DATE
  LATITUDE
  LONGITUDE
  CREATED_AT
}
"""
MeshiWhereInput is used for filtering Meshi objects.
Input was generated by ent.
"""
input MeshiWhereInput {
  not: MeshiWhereInput
  and: [MeshiWhereInput!]
  or: [MeshiWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  article_id field predicates
  """
  articleID: String
  articleIDNEQ: String
  articleIDIn: [String!]
  articleIDNotIn: [String!]
  articleIDGT: String
  articleIDGTE: String
  articleIDLT: String
  articleIDLTE: String
  articleIDContains: String
  articleIDHasPrefix: String
  articleIDHasSuffix: String
  articleIDEqualFold: String
  articleIDContainsFold: String
  """
  title field predicates
  """
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """
  image_url field predicates
  """
  imageURL: String
  imageURLNEQ: String
  imageURLIn: [String!]
  imageURLNotIn: [String!]
  imageURLGT: String
  imageURLGTE: String
  imageURLLT: String
  imageURLLTE: String
  imageURLContains: String
  imageURLHasPrefix: String
  imageURLHasSuffix: String
  imageURLEqualFold: String
  imageURLContainsFold: String
  """
  store_name field predicates
  """
  storeName: String
  storeNameNEQ: String
  storeNameIn: [String!]
  storeNameNotIn: [String!]
  storeNameGT: String
  storeNameGTE: String
  storeNameLT: String
  storeNameLTE: String
  storeNameContains: String
  storeNameHasPrefix: String
  storeNameHasSuffix: String
  storeNameEqualFold: String
  storeNameContainsFold: String
  """
  address field predicates
  """
  address: String
  addressNEQ: String
  addressIn: [String!]
  addressNotIn: [String!]
  addressGT: String
  addressGTE: String
  addressLT: String
  addressLTE: String
  addressContains: String
  addressHasPrefix: String
  addressHasSuffix: String
  addressEqualFold: String
  addressContainsFold: String
  """
  site_url field predicates
  """
  siteURL: String
  siteURLNEQ: String
  siteURLIn: [String!]
  siteURLNotIn: [String!]
  siteURLGT: String
  siteURLGTE: String
  siteURLLT: String
  siteURLLTE: String
  siteURLContains: String
  siteURLHasPrefix: String
  siteURLHasSuffix: String
  siteURLEqualFold: String
  siteURLContainsFold: String
  """
  published_date field predicates
  """
  publishedDate: Time
  publishedDateNEQ: Time
  publishedDateIn: [Time!]
  publishedDateNotIn: [Time!]
  publishedDateGT: Time
  publishedDateGTE: Time
  publishedDateLT: Time
  publishedDateLTE: Time
  """
  latitude field predicates
  """
  latitude: Float
  latitudeNEQ: Float
  latitudeIn: [Float!]
  latitudeNotIn: [Float!]
  latitudeGT: Float
  latitudeGTE: Float
  latitudeLT: Float
  latitudeLTE: Float
  """
  longitude field predicates
  """
  longitude: Float
  longitudeNEQ: Float
  longitudeIn: [Float!]
  longitudeNotIn: [Float!]
  longitudeGT: Float
  longitudeGTE: Float
  longitudeLT: Float
  longitudeLTE: Float
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  municipality edge predicates
  """
  hasMunicipality: Boolean
  hasMunicipalityWith: [MunicipalityWhereInput!]
}
"""
市町村
"""
type Municipality implements Node {
  """
  ID
  """
  id: ID!
  """
  名前
  """
  name: String!
  """
  作成日時
  """
  createdAt: Time!
  """
  あげあげめしリスト
  """
  meshis: [Meshi!]
}
"""
A connection to a list of items.
"""
type MunicipalityConnection {
  """
  A list of edges.
  """
  edges: [MunicipalityEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type MunicipalityEdge {
  """
  The item at the end of the edge.
  """
  node: Municipality
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Municipality connections
"""
input MunicipalityOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Municipalities.
  """
  field: MunicipalityOrderField!
}
"""
Properties by which Municipality connections can be ordered.
"""
enum MunicipalityOrderField {
  NAME
  CREATED_AT
}
"""
MunicipalityWhereInput is used for filtering Municipality objects.
Input was generated by ent.
"""
input MunicipalityWhereInput {
  not: MunicipalityWhereInput
  and: [MunicipalityWhereInput!]
  or: [MunicipalityWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """
  meshis edge predicates
  """
  hasMeshis: Boolean
  hasMeshisWith: [MeshiWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node
  @goModel(model: "github.com/shimabukuromeg/ageage-search/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  """
  アゲアゲめしリスト
  """
  meshis(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Meshis returned from the connection.
    """
    orderBy: MeshiOrder

    """
    Filtering options for Meshis returned from the connection.
    """
    where: MeshiWhereInput
  ): MeshiConnection!
  """
  市町村リスト
  """
  municipalities(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Municipalities returned from the connection.
    """
    orderBy: MunicipalityOrder

    """
    Filtering options for Municipalities returned from the connection.
    """
    where: MunicipalityWhereInput
  ): MunicipalityConnection!
}
"""
The builtin Time type
"""
scalar Time
