package ageagesearch

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.33

import (
	"context"

	"entgo.io/contrib/entgql"
	"github.com/shimabukuromeg/ageage-search/ent"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id int) (ent.Noder, error) {
	return r.client.Noder(ctx, id)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []int) ([]ent.Noder, error) {
	return r.client.Noders(ctx, ids)
}

// Meshis is the resolver for the meshis field.
func (r *queryResolver) Meshis(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.MeshiOrder, where *ent.MeshiWhereInput) (*ent.MeshiConnection, error) {
	return r.client.Meshi.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithMeshiOrder(orderBy),
			ent.WithMeshiFilter(where.Filter),
		)
}

// Municipalities is the resolver for the municipalities field.
func (r *queryResolver) Municipalities(ctx context.Context, after *entgql.Cursor[int], first *int, before *entgql.Cursor[int], last *int, orderBy *ent.MunicipalityOrder, where *ent.MunicipalityWhereInput) (*ent.MunicipalityConnection, error) {
	return r.client.Municipality.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithMunicipalityOrder(orderBy),
			ent.WithMunicipalityFilter(where.Filter),
		)
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
